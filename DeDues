{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DeDues","provenance":[{"file_id":"https://github.com/Catwoman21/Deep-Learning/blob/master/Copy_of_Welcome_To_Colaboratory.ipynb","timestamp":1626212343019}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"uVggrhWZ7Qcj","executionInfo":{"status":"ok","timestamp":1627924653515,"user_tz":-330,"elapsed":1750,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}}},"source":["#importing all te req lib\n","import tensorflow as tf\n","tf.config.run_functions_eagerly(True)\n","from keras.preprocessing.image import ImageDataGenerator\n","from keras.models import Sequential\n","from keras.layers import Conv2D, MaxPooling2D\n","from keras.layers import Activation, Dropout, Flatten, Dense\n","from keras import backend as K\n","from keras.preprocessing import image\n","import numpy as np"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"7a_W5Kvb7QqH","executionInfo":{"status":"ok","timestamp":1627924664968,"user_tz":-330,"elapsed":1586,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}}},"source":["# dimensions of our images.\n","img_width, img_height = 299, 299\n","\n","#defining the data directories\n","train_data_dir= '/content/drive/MyDrive/DATA SET/train'\n","validation_data_dir= '/content/drive/MyDrive/DATA SET/validation'\n","n_training_sample= 190\n","n_validation_sample= 37\n","epochs=40\n","batch_size=8"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"se0N1siL7Q0W","executionInfo":{"status":"ok","timestamp":1627924666083,"user_tz":-330,"elapsed":8,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}}},"source":["if K.image_data_format() == 'channels_first':\n","    input_shape = (3, img_width, img_height)\n","else:\n","    input_shape = (img_width, img_height, 3)"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"xm_l5IXP7Q_e","colab":{"base_uri":"https://localhost:8080/","height":86},"executionInfo":{"status":"ok","timestamp":1627487322350,"user_tz":-330,"elapsed":468,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"eda319b7-9802-4c06-f8fc-84ab8ffdd7bf"},"source":["'''#defining the model\n","model = tf.keras.models.Sequential([tf.keras.layers.Conv2D(128, (3,3), activation='relu', input_shape=input_shape),\n","                                    tf.keras.layers.MaxPooling2D(2,2),\n","                                    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),#added layer\n","                                    tf.keras.layers.MaxPooling2D(2,2),\n","                                    tf.keras.layers.Flatten(), \n","                                    tf.keras.layers.Dense(128, activation=tf.nn.relu), \n","                                    tf.keras.layers.Dense(64, activation=tf.nn.relu),\n","                                    tf.keras.layers.Dense(1, activation=tf.nn.softmax)])'''"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"#defining the model\\nmodel = tf.keras.models.Sequential([tf.keras.layers.Conv2D(128, (3,3), activation='relu', input_shape=input_shape),\\n                                    tf.keras.layers.MaxPooling2D(2,2),\\n                                    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),#added layer\\n                                    tf.keras.layers.MaxPooling2D(2,2),\\n                                    tf.keras.layers.Flatten(), \\n                                    tf.keras.layers.Dense(128, activation=tf.nn.relu), \\n                                    tf.keras.layers.Dense(64, activation=tf.nn.relu),\\n                                    tf.keras.layers.Dense(1, activation=tf.nn.softmax)])\""]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"id":"nZbfOzrL7uom","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1627487324858,"user_tz":-330,"elapsed":486,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"924a0661-8c42-4117-c448-175b596449b6"},"source":["'''#defining the optimizer and metrics\n","model.compile(optimizer = tf.optimizers.Adam(),\n","              loss = 'categorical_crossentropy',\n","              metrics=['accuracy'])'''"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"#defining the optimizer and metrics\\nmodel.compile(optimizer = tf.optimizers.Adam(),\\n              loss = 'categorical_crossentropy',\\n              metrics=['accuracy'])\""]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"xLfi6K_tvMan","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1627487326271,"user_tz":-330,"elapsed":15,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"a7633113-c3e4-4f06-85b1-703fdc097cbb"},"source":["'''model.summary()'''"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'model.summary()'"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"4D9hW4FR7x7R","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627924683925,"user_tz":-330,"elapsed":9139,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"45a603ea-175d-4287-b1b7-93dd5a34de94"},"source":["# this is the augmentation configuration we will use for training\n","\n","\n","# this is the augmentation configuration we will use for testing:\n","# only rescaling\n","test_datagen = ImageDataGenerator(rescale=1. / 255)\n","\n","train_generator = tf.keras.preprocessing.image_dataset_from_directory(\n","    train_data_dir,\n","    image_size=(img_width, img_height),\n","    batch_size=batch_size,\n","    labels=\"inferred\",\n","    label_mode=\"categorical\",\n","    class_names=['Age related macular degeneration','Diabetic retinopathy','Healthy eye','Hypertensive retinopathy'])\n","\n","validation_generator = tf.keras.preprocessing.image_dataset_from_directory(\n","    validation_data_dir,\n","    image_size=(img_width, img_height),\n","    batch_size=batch_size,\n","    labels=\"inferred\",\n","    label_mode=\"categorical\",\n","    class_names=['Age related macular degeneration','Diabetic retinopathy','Healthy eye','Hypertensive retinopathy'])\n","\n"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Found 189 files belonging to 4 classes.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/dataset_ops.py:3704: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable.debug_mode()`.\n","  \"Even though the `tf.config.experimental_run_functions_eagerly` \"\n"],"name":"stderr"},{"output_type":"stream","text":["Found 37 files belonging to 4 classes.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":102},"id":"LYxGNmmDUzMr","executionInfo":{"status":"ok","timestamp":1627487329884,"user_tz":-330,"elapsed":28,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"ac272b61-d0db-4870-bc31-60d6ce058eb6"},"source":["'''# this is the augmentation configuration we will use for training\n","train_datagen = ImageDataGenerator(\n","    rescale=1. / 255,\n","    shear_range=0.2,\n","    zoom_range=0.2,\n","    horizontal_flip=True)\n","\n","# this is the augmentation configuration we will use for testing:\n","# only rescaling\n","test_datagen = ImageDataGenerator(rescale=1. / 255)\n","\n","train_generator = train_datagen.flow_from_directory(\n","    train_data_dir,\n","    target_size=(img_width, img_height),\n","    batch_size=batch_size,\n","    class_names=['Age related macular degeneration','Diabetic retinopathy','Healthy eye','Hypertensive retinopathy'])\n","\n","validation_generator = test_datagen.flow_from_directory(\n","    validation_data_dir,\n","    target_size=(img_width, img_height),\n","    batch_size=batch_size,\n","    class_names=['Age related macular degeneration','Diabetic retinopathy','Healthy eye','Hypertensive retinopathy'])'''"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"# this is the augmentation configuration we will use for training\\ntrain_datagen = ImageDataGenerator(\\n    rescale=1. / 255,\\n    shear_range=0.2,\\n    zoom_range=0.2,\\n    horizontal_flip=True)\\n\\n# this is the augmentation configuration we will use for testing:\\n# only rescaling\\ntest_datagen = ImageDataGenerator(rescale=1. / 255)\\n\\ntrain_generator = train_datagen.flow_from_directory(\\n    train_data_dir,\\n    target_size=(img_width, img_height),\\n    batch_size=batch_size,\\n    class_names=['Age related macular degeneration','Diabetic retinopathy','Healthy eye','Hypertensive retinopathy'])\\n\\nvalidation_generator = test_datagen.flow_from_directory(\\n    validation_data_dir,\\n    target_size=(img_width, img_height),\\n    batch_size=batch_size,\\n    class_names=['Age related macular degeneration','Diabetic retinopathy','Healthy eye','Hypertensive retinopathy'])\""]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"qPjrPrFQu89_","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1627487329885,"user_tz":-330,"elapsed":23,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"c52ffc35-8c8d-4869-c7f9-ff087d516d05"},"source":["'''model.fit_generator(\n","    train_generator,\n","    steps_per_epoch=n_training_sample // batch_size,\n","    epochs=epochs,\n","    validation_data=validation_generator,\n","    validation_steps=n_validation_sample // batch_size)'''"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'model.fit_generator(\\n    train_generator,\\n    steps_per_epoch=n_training_sample // batch_size,\\n    epochs=epochs,\\n    validation_data=validation_generator,\\n    validation_steps=n_validation_sample // batch_size)'"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X63vJmaKMioJ","executionInfo":{"status":"ok","timestamp":1627924691591,"user_tz":-330,"elapsed":6397,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"f7ae3f0e-938f-48ef-b33e-9b5b03888053"},"source":["from keras.applications.vgg16 import VGG16 as PTModel\n","from keras.applications.inception_resnet_v2 import InceptionResNetV2 as PTModel\n","from keras.applications.inception_v3 import InceptionV3 as PTModel\n","from keras.layers import GlobalAveragePooling2D, Dense, Dropout, Flatten, Input, Conv2D, multiply, LocallyConnected2D, Lambda\n","from keras.models import Model\n","in_lay = Input((img_width, img_height,3))#t_x.shape[1:])\n","base_pretrained_model = PTModel(input_shape =  (img_width, img_height,3), include_top = False, weights = 'imagenet')\n","base_pretrained_model.trainable = False\n","pt_depth = 2048#base_pretrained_model.get_output_shape_at(0)#[-1]\n","pt_features = base_pretrained_model(in_lay)\n","from keras.layers import BatchNormalization\n","\n","bn_features = BatchNormalization()(pt_features)\n","\n","# here we do an attention mechanism to turn pixels in the GAP on an off\n","\n","attn_layer = Conv2D(64, kernel_size = (1,1), padding = 'same', activation = 'relu')(Dropout(0.5)(bn_features))\n","attn_layer = Conv2D(16, kernel_size = (1,1), padding = 'same', activation = 'relu')(attn_layer)\n","attn_layer = Conv2D(8, kernel_size = (1,1), padding = 'same', activation = 'relu')(attn_layer)\n","attn_layer = Conv2D(1, \n","                    kernel_size = (1,1), \n","                    padding = 'valid', \n","                    activation = 'sigmoid')(attn_layer)\n","# fan it out to all of the channels\n","up_c2_w = np.ones((1, 1, 1, pt_depth))\n","up_c2 = Conv2D(pt_depth, kernel_size = (1,1), padding = 'same', \n","               activation = 'linear', use_bias = False, weights = [up_c2_w])\n","up_c2.trainable = False\n","attn_layer = up_c2(attn_layer)\n","\n","mask_features = multiply([attn_layer, bn_features])\n","gap_features = GlobalAveragePooling2D()(mask_features)\n","gap_mask = GlobalAveragePooling2D()(attn_layer)\n","# to account for missing values from the attention model\n","gap = Lambda(lambda x: x[0]/x[1], name = 'RescaleGAP')([gap_features, gap_mask])\n","gap_dr = Dropout(0.25)(gap)\n","dr_steps = Dropout(0.25)(Dense(128, activation = 'relu')(gap_dr))\n","out_layer = Dense(4, activation = 'softmax')(dr_steps) #t_y.shape[-1]\n","retina_model = Model(inputs = [in_lay], outputs = [out_layer])\n","from keras.metrics import top_k_categorical_accuracy\n","def top_2_accuracy(in_gt, in_pred):\n","    return top_k_categorical_accuracy(in_gt, in_pred, k=2)\n","\n","retina_model.compile(optimizer = 'adam', loss = 'categorical_crossentropy',\n","                           metrics = ['categorical_accuracy', top_2_accuracy])\n","retina_model.summary()"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/inception_v3/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\n","87916544/87910968 [==============================] - 3s 0us/step\n","87924736/87910968 [==============================] - 3s 0us/step\n","Model: \"model\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_1 (InputLayer)            [(None, 299, 299, 3) 0                                            \n","__________________________________________________________________________________________________\n","inception_v3 (Functional)       (None, 8, 8, 2048)   21802784    input_1[0][0]                    \n","__________________________________________________________________________________________________\n","batch_normalization_94 (BatchNo (None, 8, 8, 2048)   8192        inception_v3[0][0]               \n","__________________________________________________________________________________________________\n","dropout (Dropout)               (None, 8, 8, 2048)   0           batch_normalization_94[0][0]     \n","__________________________________________________________________________________________________\n","conv2d_94 (Conv2D)              (None, 8, 8, 64)     131136      dropout[0][0]                    \n","__________________________________________________________________________________________________\n","conv2d_95 (Conv2D)              (None, 8, 8, 16)     1040        conv2d_94[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_96 (Conv2D)              (None, 8, 8, 8)      136         conv2d_95[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_97 (Conv2D)              (None, 8, 8, 1)      9           conv2d_96[0][0]                  \n","__________________________________________________________________________________________________\n","conv2d_98 (Conv2D)              (None, 8, 8, 2048)   2048        conv2d_97[0][0]                  \n","__________________________________________________________________________________________________\n","multiply (Multiply)             (None, 8, 8, 2048)   0           conv2d_98[0][0]                  \n","                                                                 batch_normalization_94[0][0]     \n","__________________________________________________________________________________________________\n","global_average_pooling2d (Globa (None, 2048)         0           multiply[0][0]                   \n","__________________________________________________________________________________________________\n","global_average_pooling2d_1 (Glo (None, 2048)         0           conv2d_98[0][0]                  \n","__________________________________________________________________________________________________\n","RescaleGAP (Lambda)             (None, 2048)         0           global_average_pooling2d[0][0]   \n","                                                                 global_average_pooling2d_1[0][0] \n","__________________________________________________________________________________________________\n","dropout_1 (Dropout)             (None, 2048)         0           RescaleGAP[0][0]                 \n","__________________________________________________________________________________________________\n","dense (Dense)                   (None, 128)          262272      dropout_1[0][0]                  \n","__________________________________________________________________________________________________\n","dropout_2 (Dropout)             (None, 128)          0           dense[0][0]                      \n","__________________________________________________________________________________________________\n","dense_1 (Dense)                 (None, 4)            516         dropout_2[0][0]                  \n","==================================================================================================\n","Total params: 22,208,133\n","Trainable params: 399,205\n","Non-trainable params: 21,808,928\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"27YniGy3Rn8P","executionInfo":{"status":"ok","timestamp":1627924691592,"user_tz":-330,"elapsed":22,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"303575f6-c633-4f67-c417-ca0709ef009a"},"source":["from keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, ReduceLROnPlateau\n","weight_path=\"{}_weights.best.hdf5\".format('DeDues')\n","\n","checkpoint = ModelCheckpoint(weight_path, monitor='val_loss', verbose=1, \n","                             save_best_only=True, mode='min', save_weights_only = True)\n","\n","reduceLROnPlat = ReduceLROnPlateau(monitor='val_loss', factor=0.8, patience=3, verbose=1, mode='auto', epsilon=0.0001, cooldown=5, min_lr=0.0001)\n","early = EarlyStopping(monitor=\"val_loss\", \n","                      mode=\"min\", \n","                      patience=6) # probably needs to be more patient, but kaggle time is limited\n","callbacks_list = [checkpoint, early, reduceLROnPlat]"],"execution_count":7,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:`epsilon` argument is deprecated and will be removed, use `min_delta` instead.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LHtV4SmzRoyC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627924925784,"user_tz":-330,"elapsed":234209,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"c2c459a0-4558-45f4-a0a5-c3e5c39fe80c"},"source":["retina_model.fit_generator(train_generator,\n","                           validation_data = validation_generator, \n","                              epochs = 10, \n","                              callbacks = callbacks_list,\n","                             workers = 0, # tf-generators are not thread-safe\n","                             use_multiprocessing=False, \n","                             max_queue_size = 0\n","                            )"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/keras/engine/training.py:1915: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["24/24 [==============================] - 92s 2s/step - loss: 1.2985 - categorical_accuracy: 0.4346 - top_2_accuracy: 0.6113 - val_loss: 1.3243 - val_categorical_accuracy: 0.6486 - val_top_2_accuracy: 0.8108\n","\n","Epoch 00001: val_loss improved from inf to 1.32428, saving model to DeDues_weights.best.hdf5\n","Epoch 2/10\n","24/24 [==============================] - 10s 397ms/step - loss: 0.7758 - categorical_accuracy: 0.7208 - top_2_accuracy: 0.8637 - val_loss: 0.5388 - val_categorical_accuracy: 0.7838 - val_top_2_accuracy: 0.9730\n","\n","Epoch 00002: val_loss improved from 1.32428 to 0.53875, saving model to DeDues_weights.best.hdf5\n","Epoch 3/10\n","24/24 [==============================] - 10s 406ms/step - loss: 0.6451 - categorical_accuracy: 0.7625 - top_2_accuracy: 0.9387 - val_loss: 0.3298 - val_categorical_accuracy: 0.9189 - val_top_2_accuracy: 0.9459\n","\n","Epoch 00003: val_loss improved from 0.53875 to 0.32979, saving model to DeDues_weights.best.hdf5\n","Epoch 4/10\n","24/24 [==============================] - 10s 402ms/step - loss: 0.5456 - categorical_accuracy: 0.8084 - top_2_accuracy: 0.9506 - val_loss: 0.3854 - val_categorical_accuracy: 0.8649 - val_top_2_accuracy: 0.9459\n","\n","Epoch 00004: val_loss did not improve from 0.32979\n","Epoch 5/10\n","24/24 [==============================] - 10s 399ms/step - loss: 0.4640 - categorical_accuracy: 0.8381 - top_2_accuracy: 0.9627 - val_loss: 0.2547 - val_categorical_accuracy: 0.9189 - val_top_2_accuracy: 0.9730\n","\n","Epoch 00005: val_loss improved from 0.32979 to 0.25472, saving model to DeDues_weights.best.hdf5\n","Epoch 6/10\n","24/24 [==============================] - 10s 398ms/step - loss: 0.3424 - categorical_accuracy: 0.8926 - top_2_accuracy: 0.9956 - val_loss: 0.2046 - val_categorical_accuracy: 0.9189 - val_top_2_accuracy: 1.0000\n","\n","Epoch 00006: val_loss improved from 0.25472 to 0.20463, saving model to DeDues_weights.best.hdf5\n","Epoch 7/10\n","24/24 [==============================] - 10s 399ms/step - loss: 0.4301 - categorical_accuracy: 0.8488 - top_2_accuracy: 0.9626 - val_loss: 0.1454 - val_categorical_accuracy: 0.9730 - val_top_2_accuracy: 1.0000\n","\n","Epoch 00007: val_loss improved from 0.20463 to 0.14542, saving model to DeDues_weights.best.hdf5\n","Epoch 8/10\n","24/24 [==============================] - 10s 399ms/step - loss: 0.3308 - categorical_accuracy: 0.8724 - top_2_accuracy: 0.9862 - val_loss: 0.1447 - val_categorical_accuracy: 0.9730 - val_top_2_accuracy: 1.0000\n","\n","Epoch 00008: val_loss improved from 0.14542 to 0.14465, saving model to DeDues_weights.best.hdf5\n","Epoch 9/10\n","24/24 [==============================] - 10s 406ms/step - loss: 0.3004 - categorical_accuracy: 0.9105 - top_2_accuracy: 0.9807 - val_loss: 0.0949 - val_categorical_accuracy: 0.9459 - val_top_2_accuracy: 1.0000\n","\n","Epoch 00009: val_loss improved from 0.14465 to 0.09493, saving model to DeDues_weights.best.hdf5\n","Epoch 10/10\n","24/24 [==============================] - 10s 400ms/step - loss: 0.3069 - categorical_accuracy: 0.8605 - top_2_accuracy: 0.9932 - val_loss: 0.0793 - val_categorical_accuracy: 0.9730 - val_top_2_accuracy: 1.0000\n","\n","Epoch 00010: val_loss improved from 0.09493 to 0.07928, saving model to DeDues_weights.best.hdf5\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7fcd9bb91190>"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"3_u04WCI79iL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627925316259,"user_tz":-330,"elapsed":598,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"cceaea4f-beca-4ac0-bec1-2a17354074ef"},"source":["#testing the model\n","pred= image.load_img('/content/drive/MyDrive/DATA SET/Test/hi38.JPG', target_size=(299,299))\n","pred=image.img_to_array(pred)\n","pred= np.expand_dims(pred, axis=0)\n","\n","result= retina_model.predict(pred)\n","print(result)"],"execution_count":18,"outputs":[{"output_type":"stream","text":["[[1.3560278e-03 5.4187715e-02 7.2992692e-04 9.4372636e-01]]\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/data/ops/dataset_ops.py:3704: UserWarning: Even though the `tf.config.experimental_run_functions_eagerly` option is set, this option does not apply to tf.data functions. To force eager execution of tf.data functions, please use `tf.data.experimental.enable.debug_mode()`.\n","  \"Even though the `tf.config.experimental_run_functions_eagerly` \"\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"aXc4HAis8GtN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627925318368,"user_tz":-330,"elapsed":5,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"6a9638ea-56e3-49f4-99ba-5f4173903889"},"source":["xyz=['Age related macular degeneration','Diabetic retinopathy','Healthy eye','Hypertensive retinopathy']\n","print(xyz[np.argmax(result)],\"with accuracy: \",result[0][np.argmax(result)]*100)\n"],"execution_count":19,"outputs":[{"output_type":"stream","text":["Hypertensive retinopathy with accuracy:  94.37263607978821\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qSiGKBkvv_6l","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627924928075,"user_tz":-330,"elapsed":6,"user":{"displayName":"Vanshika Sachan","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggv1bA9UfO-rI_0FkG8GTf8Mcvz1QW7bXktK_zp=s64","userId":"05578615245314081648"}},"outputId":"38b4ae04-c32d-42a2-9c4c-e4daf42ab0a2"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rhEsNBSOzewp"},"source":[""],"execution_count":null,"outputs":[]}]}